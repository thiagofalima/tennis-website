@charset "UTF-8";
body { /*Geralmente começo codando pelo body, sem classe mesmo, o resto é legal colocar uma classe pelo que eu entendi.*/
  margin: 1.5em; /*em é uma unidade relativa (equivale a 16 pixels), para margin and padding*/
  font-family: "Poppins", sans-serif;
}

a {
  text-decoration: none;
  font-size: 1.3rem;
}

.hero-img {
  position: absolute;
  top: 0;
  left: 0;
  background: url(../images/shoe_1.jpg);
  background-size: cover;
  background-position-x: 20%;
  background-position-y: 20%;
  width: 100%;
  height: 100vh;
  z-index: -1; /*só quando posição absuluta ou fixed, serve pra colocar abaixo de outros itens*/
  animation: introLoad 2s forwards;
}

.logo {
  color: white;
  font-weight: bold;
}

nav {
  position: fixed; /*Pro menu descer junto quando vc rolar a página para baixo.*/
  right: 0;
  top: 0;
  background: white;
  height: 100vh;
  width: 50%;
  z-index: 999; /*O quanto o elemento fica acima dos demais, em cima mesmo, quanto maior o número, mais ele se sobrepõe aos demais*/
  text-transform: uppercase;
  transform: translateX(100%); /*para transladar um elemento*/
  transition: transform 0.5s ease-in-out;
}
nav ul {
  list-style-type: none;
  padding: 0;
  margin-top: 8em;
}
nav ul a {
  color: black;
  padding: 0.75em 2em; /*1 numero cima e baixo, segundo número dierita e esquerda*/
  display: block; /*padding em um link só funciona se vc display:block*/
}
nav ul a:hover {
  background: rgb(235, 235, 235);
}
nav svg.close {
  float: right; /*para levar algo para a dierita*/
  margin: 2em;
  width: 1em;
}

header {
  display: flex;
  justify-content: space-between;
}
header svg {
  width: 2.3em;
  margin-top: -0.6em;
  cursor: pointer;
}

h1 {
  font-size: 3rem;
  margin-top: 2em;
  line-height: 3.3rem;
}

.subhead {
  font-size: 1.4rem;
}

section.hero {
  color: white;
  height: 90vh;
  animation: moveDown 1s ease-in-out forwards;
  opacity: 0;
}
section.hero .down-arrow {
  stroke: white;
  position: absolute;
  bottom: 2em;
  width: 1em;
  animation: moveArrow 1s alternate-reverse infinite;
}
section.hero .down-arrow path {
  fill: white;
}

.more-info img {
  width: 100%;
  -o-object-fit: cover;
     object-fit: cover; /*Essa linha e a de baixo serve pra ajustar a imagem todas do mesmo tamanho*/
  height: 11em; /*sem distorcer, muito daora!*/
}
.more-info .title {
  font-weight: bold;
  font-size: 1.25rem; /*rem unit porque é texto.*/
}
.more-info .desc {
  line-height: 1.5rem;
}

.open-nav {
  transform: translateX(0%);
}

/*Agora codando pra ajustar em telas de diferente tamanho, porque fizemos primeiro para ficar legal na tela do celular*/
@media only screen and (min-width: 680px) { /*esse ruleset só acontece nessa condição, de tela igual ou maior a 680px*/
  body { /*Geralmente começo codando pelo body, sem classe mesmo, o resto é legal colocar uma classe pelo que eu entendi.*/
    margin: 1.5em 5em; /*em é uma unidade relativa (equivale a 16 pixels), para margin and padding*/
    font-family: "Poppins", sans-serif;
  }
}
@media only screen and (min-width: 920px) {
  .menu {
    display: none;
  }
  nav {
    transform: translateX(0);
    position: unset;
    display: block;
    width: auto;
    height: auto;
    background: none;
  }
  nav svg.close {
    display: none;
  }
  nav ul {
    display: flex; /*Serve para deixar os itens em colunas ao invés de linhas*/
    margin: 0;
  }
  nav ul a {
    color: white;
    padding: 0.5em 0.5em;
    font-size: 0.9em;
  }
  nav ul a:hover { /*o que fazer quado passar o mouse em cima. hover significa flutuar*/
    background: none;
    text-decoration: underline;
  }
  .hero-img {
    left: unset;
    right: 0; /*para mover para a direita, quanto menor, mais para a direita.*/
    width: 50%;
    height: 42em;
  }
  .logo {
    color: black;
  }
  .logo span {
    color: red;
  }
  section.hero {
    color: black;
    height: auto;
    width: 40%;
    margin-bottom: 8em;
  }
  section.hero svg.down-arrow { /*Cuidado com o quanto vc é específico, isso dá trabalho. Equilíbrio.*/
    stroke: black;
    position: unset;
  }
  section.hero svg.down-arrow path {
    fill: black;
  }
  .feature {
    display: grid;
    grid-template-columns: repeat(2, auto);
    gap: 3em;
    margin-bottom: 8em;
  }
  .feature img {
    width: 25em;
  }
  .feature .content {
    text-align: right;
    width: 25em;
  }
  .feature.left { /*quando tem espaço no nome da classe eu coloco um . entre as palavras.*/
    grid-template-areas: "left right";
  }
  .feature.left img {
    grid-area: left;
  }
  .feature.left .content {
    text-align: left;
    width: 25em;
    justify-self: left;
  }
}
@media only screen and (min-width: 1200px) {
  .wrapper {
    width: 1200px;
    margin: 0 auto; /*é uma forma fácil de centralizar elementos.*/
  }
  .feature {
    gap: 0;
  }
}
@keyframes introLoad {
  from { /*Pra falar de onde para onde, pode ser em % também*/
    -webkit-clip-path: polygon(0 1%, 100% 0, 100% 0, 0 0);
            clip-path: polygon(0 1%, 100% 0, 100% 0, 0 0);
  }
  to {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
            clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
  }
}
@keyframes moveArrow {
  from { /*Pra falar de onde para onde, pode ser em % também*/
    transform: translateY(-20px);
  }
  to {
    transform: translateY(0);
  }
}
@keyframes moveDown {
  from { /*Pra falar de onde para onde, pode ser em % também*/
    transform: translateY(-100px);
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}/*# sourceMappingURL=main.css.map */